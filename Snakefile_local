import glob

configfile: "config_local.yaml"

transcript_file = config["files"]["transcripts"]
transcripts = open(transcript_file,'r').readlines()
transcripts = [x.rstrip() for x in transcripts]
faidx_input = [t+": " for t in transcripts]

complement_sequence = config["output"]["complement_sequence"]
split_complement_sequence = config["output"]["split_complement_sequence"]
encoding_probes = config["output"]["encoding_probes"]
filtered_probes = config["output"]["filtered_probes"]
probe_stats = config["output"]["probe_stats"]
filtered_probes_alligned=config["output"]["filtered_probes_alligned"]
complement_probes = config["output"]["complement_probes"]
blastdb = config["output"]["blastdb"]
blast_results = config["output"]["blast_results"]



gencode_file = config["files"]["gencode"]
readout_file = config["files"]["readout"]
barcode_file = config["files"]["barcode"]
index_files = config["files"]["index"]


#Execs
# faidx_exec = config["exec"]["faidx"]
# pyfasta_exec = config["exec"]["pyfasta"]
# python_exec = config["exec"]["python"]

#Params
kmer_length = config["parameters"]["kmer_length"]
kmer_overlap = config["parameters"]["kmer_overlap"]

#Paths:
src_path = config["path"]["src"]

rule all:
    input:
        complement_sequence,
        split_complement_sequence,
        encoding_probes,
        filtered_probes,
        probe_stats,
        filtered_probes_alligned+"Aligned.out.sam",
        complement_probes,
        blastdb+".nsq",
        blast_results,

rule complement_sequence:
    input:
        transcript_file
    output:
        complement_sequence
    shell:
        '''
        faidx --complement {gencode_file} {faidx_input} > {output}
        '''
rule split_sequence:
    input:
        complement_sequence
    output:
        split_complement_sequence
    params:
        tmp_file=complement_sequence.replace(".fasta","")
    shell:
        '''
        pyfasta split -n1 -k{kmer_length} -o{kmer_overlap} {input}
        mv {params.tmp_file}.split.{kmer_length}mer.{kmer_overlap}overlap.fasta {output}
        '''
rule design_probes:
    input:
        split_complement_sequence,
        readout_file,
        barcode_file
    output:
        encoding_probes
    shell:
        '''
        python {src_path}/probedesign.py config_local.yaml
        '''
rule filter_probes:
    input:
        encoding_probes
    output:
        filtered_probes,
        probe_stats
    shell:
        '''
        python {src_path}/filtering_probes.py config_local.yaml
        '''
### DO ALLIGNIN WITH STAR
### only select probes with unique hit
rule allign_probes:
    input:
        index_files,
        filtered_probes,
    output:
        filtered_probes_alligned+"Aligned.out.sam"
    shell:
        '''
        STAR --genomeDir {index_files} --runThreadN 6 --readFilesIn {filtered_probes} --outFileNamePrefix {filtered_probes_alligned}
        '''
## add rule


rule complement_sequence_probes:
    input:
        filtered_probes
    output:
        complement_probes
    shell:
        '''
        faidx --complement {input} > {complement_probes}
        '''
rule create_blastdb:
    input:
        #testing with previous
        complement_probes
        #add here allignment filtered probe_stats
    output:
        #MAKE BLASTDB THE COMPLEMENT OF THE PROBES
        blastdb+".nsq"
    shell:
        '''
        makeblastdb -in {input} -dbtype nucl -parse_seqids -out {blastdb}
        cp {complement_probes} {blastdb}
        '''
rule blast_probes:
    input:
        blastdb+".nsq",
        filtered_probes,
    output:
        blast_results
    shell:
        '''
        blastn -db {blastdb} -query {filtered_probes} -out {output}
        '''
